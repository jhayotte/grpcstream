// Code generated by protoc-gen-go. DO NOT EDIT.
// source: book.proto

/*
Package book is a generated protocol buffer package.

It is generated from these files:
	book.proto

It has these top-level messages:
	GetAllBooksByAuthorRequest
	GetAllBooksByAuthorResponse
	Book
*/
package book

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the author's name.
type GetAllBooksByAuthorRequest struct {
	Author string `protobuf:"bytes,1,opt,name=author" json:"author,omitempty"`
}

func (m *GetAllBooksByAuthorRequest) Reset()                    { *m = GetAllBooksByAuthorRequest{} }
func (m *GetAllBooksByAuthorRequest) String() string            { return proto.CompactTextString(m) }
func (*GetAllBooksByAuthorRequest) ProtoMessage()               {}
func (*GetAllBooksByAuthorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetAllBooksByAuthorRequest) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

// The response message containing the list of all author's books
type GetAllBooksByAuthorResponse struct {
	Books []*Book `protobuf:"bytes,1,rep,name=books" json:"books,omitempty"`
}

func (m *GetAllBooksByAuthorResponse) Reset()                    { *m = GetAllBooksByAuthorResponse{} }
func (m *GetAllBooksByAuthorResponse) String() string            { return proto.CompactTextString(m) }
func (*GetAllBooksByAuthorResponse) ProtoMessage()               {}
func (*GetAllBooksByAuthorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetAllBooksByAuthorResponse) GetBooks() []*Book {
	if m != nil {
		return m.Books
	}
	return nil
}

type Book struct {
	Title       string `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Author      string `protobuf:"bytes,2,opt,name=author" json:"author,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *Book) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func init() {
	proto.RegisterType((*GetAllBooksByAuthorRequest)(nil), "book.GetAllBooksByAuthorRequest")
	proto.RegisterType((*GetAllBooksByAuthorResponse)(nil), "book.GetAllBooksByAuthorResponse")
	proto.RegisterType((*Book)(nil), "book.Book")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BookService service

type BookServiceClient interface {
	// Sends the inventory of a specific author
	GetAllBooksByAuthor(ctx context.Context, in *GetAllBooksByAuthorRequest, opts ...grpc.CallOption) (BookService_GetAllBooksByAuthorClient, error)
}

type bookServiceClient struct {
	cc *grpc.ClientConn
}

func NewBookServiceClient(cc *grpc.ClientConn) BookServiceClient {
	return &bookServiceClient{cc}
}

func (c *bookServiceClient) GetAllBooksByAuthor(ctx context.Context, in *GetAllBooksByAuthorRequest, opts ...grpc.CallOption) (BookService_GetAllBooksByAuthorClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_BookService_serviceDesc.Streams[0], c.cc, "/book.BookService/GetAllBooksByAuthor", opts...)
	if err != nil {
		return nil, err
	}
	x := &bookServiceGetAllBooksByAuthorClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BookService_GetAllBooksByAuthorClient interface {
	Recv() (*GetAllBooksByAuthorResponse, error)
	grpc.ClientStream
}

type bookServiceGetAllBooksByAuthorClient struct {
	grpc.ClientStream
}

func (x *bookServiceGetAllBooksByAuthorClient) Recv() (*GetAllBooksByAuthorResponse, error) {
	m := new(GetAllBooksByAuthorResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for BookService service

type BookServiceServer interface {
	// Sends the inventory of a specific author
	GetAllBooksByAuthor(*GetAllBooksByAuthorRequest, BookService_GetAllBooksByAuthorServer) error
}

func RegisterBookServiceServer(s *grpc.Server, srv BookServiceServer) {
	s.RegisterService(&_BookService_serviceDesc, srv)
}

func _BookService_GetAllBooksByAuthor_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetAllBooksByAuthorRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BookServiceServer).GetAllBooksByAuthor(m, &bookServiceGetAllBooksByAuthorServer{stream})
}

type BookService_GetAllBooksByAuthorServer interface {
	Send(*GetAllBooksByAuthorResponse) error
	grpc.ServerStream
}

type bookServiceGetAllBooksByAuthorServer struct {
	grpc.ServerStream
}

func (x *bookServiceGetAllBooksByAuthorServer) Send(m *GetAllBooksByAuthorResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _BookService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "book.BookService",
	HandlerType: (*BookServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllBooksByAuthor",
			Handler:       _BookService_GetAllBooksByAuthor_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "book.proto",
}

func init() { proto.RegisterFile("book.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x50, 0xbd, 0x4f, 0x87, 0x30,
	0x10, 0xb5, 0xf2, 0x91, 0x78, 0x6c, 0xd5, 0x18, 0x82, 0x4b, 0xed, 0xc4, 0x44, 0x0c, 0xba, 0x1b,
	0x58, 0xdc, 0x31, 0x71, 0x34, 0x11, 0xbc, 0xc4, 0x06, 0xe4, 0xb0, 0x2d, 0x26, 0xfe, 0xf7, 0xa6,
	0x2d, 0x03, 0x03, 0xbf, 0xdf, 0xd6, 0x77, 0xf7, 0xfa, 0x3e, 0x0e, 0xa0, 0x27, 0x1a, 0xab, 0x45,
	0x93, 0x25, 0x1e, 0xbb, 0xb7, 0x7c, 0x82, 0xe2, 0x05, 0x6d, 0x33, 0x4d, 0x2d, 0xd1, 0x68, 0xda,
	0xbf, 0x66, 0xb5, 0x5f, 0xa4, 0x3b, 0xfc, 0x59, 0xd1, 0x58, 0x7e, 0x0b, 0xe9, 0x87, 0x1f, 0xe4,
	0x4c, 0xb0, 0xf2, 0xaa, 0xdb, 0x90, 0x7c, 0x86, 0xbb, 0xc3, 0x5f, 0x66, 0xa1, 0xd9, 0x20, 0x17,
	0x90, 0x38, 0x71, 0x93, 0x33, 0x11, 0x95, 0x59, 0x0d, 0x95, 0xb7, 0x75, 0xdc, 0x2e, 0x2c, 0xe4,
	0x1b, 0xc4, 0x0e, 0xf2, 0x1b, 0x48, 0xac, 0xb2, 0x13, 0x6e, 0xfa, 0x01, 0xec, 0x6c, 0x2f, 0xf7,
	0xb6, 0x5c, 0x40, 0xf6, 0x89, 0x66, 0xd0, 0x6a, 0xb1, 0x8a, 0xe6, 0x3c, 0xf2, 0xcb, 0xfd, 0xa8,
	0xfe, 0x86, 0xcc, 0xe9, 0xbe, 0xa2, 0xfe, 0x55, 0x03, 0xf2, 0x77, 0xb8, 0x3e, 0xc8, 0xc9, 0x45,
	0x08, 0x74, 0xba, 0x78, 0x71, 0x7f, 0x86, 0x11, 0x4a, 0xca, 0x8b, 0x07, 0xd6, 0xa7, 0xfe, 0x94,
	0x8f, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff, 0x73, 0x05, 0xc7, 0xf3, 0x58, 0x01, 0x00, 0x00,
}
